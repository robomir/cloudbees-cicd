#resource "time_static" "epoch" {
#  triggers = {
#    controllers = sha256(local.controller_template)
#  }
#}

locals {
  namespace         = (var.namespace == "" ? "cloudbees-${var.env}" : "${var.namespace}")
  ssh_volumes       = [ { name = "ssh-config-dir", emptyDir = {} }, { name = "git-ssh-key", secret = { secretName = "git-ssh-key" } } ]
  ssh_volume_mounts = [ { "name" = "ssh-config-dir", "mountPath" = "/var/jenkins_home/.ssh" }, { "name" = "git-ssh-key", "mountPath" = "/run/secrets/git-ssh-key", "readOnly" = true } ]
#  casc_version      = "${ceil((time_static.epoch.unix - 1687316900) / 60)}"
  casc_version      = var.casc_version
  default_memory    = (var.env == "dev" ? "4096" : "5120")
  default_cpus      = (var.env == "dev" ? "1.0" : "2.0")
}

locals {
  bundle_template       = <<EOT
apiVersion: "1"
id: "jenkins"
description: "Autogenerated bundle descriptor"
version: "${local.casc_version}"
jcasc:
  - "jenkins.yaml"
  - "clouds.yaml"
plugins:
  - "plugins.yaml"
rbac:
  - "rbac.yaml"
items:
  - "items.yaml"
  - "tests.yaml"
EOT

  controller_template   = <<EOT
removeStrategy:
  rbac: SYNC
  items: NONE
items:
%{ for controller_name,v in var.controllers }
- kind: managedController
  name: ${controller_name}
  configuration:
    kubernetes:
      systemProperties: |-
        CI_ENVIRONMENT=$${CI_ENVIRONMENT}
        CONTROLLER_NAME=${controller_name}
        CI_ARTIFACTS_BUCKET=${lookup(lookup(v, "systemProperties", {}), "CI_ARTIFACTS_BUCKET", "lookout-$${CI_ENVIRONMENT}-cloudbees-artifacts")}
        SECRETS_ROLE_ARN=arn:aws:iam::${v["secrets_account_id"]}:role/eks-iam-cloudbees-$${CI_ENVIRONMENT}-${controller_name}-secrets
        SM_CREDENTIALS_PATH=cd/cloudbees/${ lookup(v["config"], "use_global_secrets", true) ?  "" : "${controller_name}/" }$${CI_ENVIRONMENT}
        CONFIG_VALUES_PATH=$${CONFIG_VALUES_PATH}
      allowExternalAgents: false
      terminationGracePeriodSeconds: 1200
      memory: ${lookup(v["config"], "memory", local.default_memory)}
      fsGroup: '1000'
      cpus: ${lookup(v["config"], "cpus", local.default_cpus)}
      readinessTimeoutSeconds: 5
      livenessInitialDelaySeconds: 300
      readinessInitialDelaySeconds: 30
      clusterEndpointId: ${lookup(v["config"], "clusterEndpointId", "default")}
      disk: ${lookup(v["config"], "disk", 200)}
      readinessFailureThreshold: 100
      livenessTimeoutSeconds: 10
      domain: ${controller_name}
      livenessPeriodSeconds: 10
      javaOptions: >-
          -XX:InitialRAMPercentage=50.0
          -XX:MaxRAMPercentage=50.0
          -Dcom.sun.management.jmxremote.port=1099
          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.ssl=false
          -XshowSettings:vm
          -XX:+AlwaysPreTouch
          -XX:+HeapDumpOnOutOfMemoryError
          -XX:HeapDumpPath=/var/jenkins_home
          -XX:+UseG1GC
          -XX:+DisableExplicitGC
          -XX:+UnlockDiagnosticVMOptions
          -XX:+UnlockExperimentalVMOptions
          -Xlog:gc*=info,gc+heap=debug,gc+ref*=debug,gc+ergo*=trace,gc+age*=trace:file=/var/jenkins_home/gc.log:utctime,pid,level,tags:filecount=2,filesize=100M
          -XX:+ParallelRefProcEnabled
          -XX:ErrorFile=/var/jenkins_home/hs_err_%p.log
          -XX:+LogVMOutput
          -XX:LogFile=/var/jenkins_home/jvm.log
          -XX:+UseStringDeduplication
          -Dhudson.slaves.NodeProvisioner.initialDelay=0
          -Dhudson.model.ParametersAction.safeParameters=GERRIT_REFSPEC,GERRIT_BRANCH,GERRIT_CHANGE_ID,GERRIT_CHANGE_COMMIT_MESSAGE,GERRIT_CHANGE_NUMBER,GERRIT_CHANGE_OWNER,GERRIT_CHANGE_OWNER_EMAIL,GERRIT_CHANGE_OWNER_NAME,GERRIT_CHANGE_PRIVATE_STATE,GERRIT_CHANGE_SUBJECT,GERRIT_CHANGE_URL,GERRIT_CHANGE_WIP_STATE,GERRIT_EVENT_ACCOUNT,GERRIT_EVENT_ACCOUNT_EMAIL,GERRIT_EVENT_ACCOUNT_NAME,GERRIT_EVENT_HASH,GERRIT_EVENT_TYPE,GERRIT_HOST,GERRIT_NAME,GERRIT_PATCHSET_NUMBER,GERRIT_PATCHSET_REVISION,GERRIT_PATCHSET_UPLOADER,GERRIT_PATCHSET_UPLOADER_EMAIL,GERRIT_PATCHSET_UPLOADER_NAME,GERRIT_PORT,GERRIT_PROJECT,GERRIT_SCHEME,GERRIT_TOPIC,GERRIT_VERSION
          -Dhudson.model.DirectoryBrowserSupport.CSP="default-src 'none'; img-src 'self'; style-src 'self'; child-src 'self'; frame-src 'self';"
      yaml: |-
        ---
        apiVersion: "apps/v1"
        kind: "StatefulSet"
        spec:
          template:
            metadata:
              annotations:
                ad.datadoghq.com/jenkins.check_names: '["jenkins"]'
                ad.datadoghq.com/jenkins.init_configs: '[{"is_jmx": true, "collect_default_metrics": true}]'
                ad.datadoghq.com/jenkins.instances: '[{"jmx_url": "service:jmx:rmi:///jndi/rmi://%%host%%:1099/jmxrmi"}]'
              labels:
                filebeat-index: eks-cloudbees
            spec:
              serviceAccountName: "${lookup(v["config"], "serviceAccountName", controller_name)}"
              containers:
              - name: "jenkins"
                volumeMounts:
                  - name: ssh-config-dir
                    mountPath: /var/jenkins_home/.ssh
                  - name: git-ssh-key
                    mountPath: /run/secrets/git-ssh-key
                    readOnly: true
              %{~ for secret_name, config in merge(var.default_csi_secrets, v["secrets"]) ~}
              %{~ if length(v["secrets"]) < 1 || contains(keys(v["secrets"]), secret_name) ~}
                  - name: ${replace(secret_name, "_", "-")}
                    mountPath: ${lookup(config, "mountPath", "/run/secrets/${secret_name}")}
                    subPath: ${secret_name}
                    readOnly: true
              %{~ endif ~}
              %{~ endfor ~}
              volumes:
                - name: ssh-config-dir
                  emptyDir: {}
                - name: git-ssh-key
                  secret:
                    secretName: git-ssh-key
              %{~ for secret_name, config in merge(var.default_csi_secrets, v["secrets"]) ~}
              %{~ if length(v["secrets"]) < 1 || contains(keys(v["secrets"]), secret_name) ~}
                - name: ${replace(secret_name, "_", "-")}
                  csi:
                    driver: secrets-store.csi.k8s.io
                    readOnly: true
                    volumeAttributes:
                      secretProviderClass: "${ lookup(v["config"], "use_global_secrets", true) ?  "cloudbees-${var.env}-controllers" : "cloudbees-${var.env}-controller-${controller_name}" }"
              %{~ endif ~}
              %{~ endfor ~}
  description: ${length(split("-", controller_name)[0]) < 4 ? upper(controller_name) : title(controller_name)} Controller
  displayName: ${length(split("-", controller_name)[0]) < 4 ? upper(controller_name) : title(controller_name)} Controller
  properties:
  - configurationAsCode:
      bundle: ${controller_name}-$${CI_ENVIRONMENT}
  - sharedHeaderLabelOptIn:
      optIn: true
  - healthReporting:
      enabled: true
  - owner:
      delay: 5
      owners: ''
  - envelopeExtension:
      allowExceptions: false
  - sharedConfigurationOptOut:
      optOut: false
%{ endfor }
EOT
}

resource "kubernetes_config_map" "casc" {
  metadata {
    namespace = local.namespace
    name      = "oc-casc-bundle"
  }

  data = merge({
    for f in fileset(var.casc_dir, "*.yaml") :
    f => file(join("/", [var.casc_dir, f]))
  }, {
    "bundle.yaml" = local.bundle_template
    "items.yaml" = local.controller_template
  })
}
